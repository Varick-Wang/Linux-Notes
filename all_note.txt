第三阶段 5 + 5 + 3 + 6   数据库管理员 DBA  IDC监控 linux运维
数据库管理： 数据库基础 数据库进阶  NoSQL
监控与服务安全：  监控服务 服务安全

   知道    了解   懂   精通

不迟到 不早退    认真听讲  专心做实验 

庞丽静  静静 

panglj@tedu.cn   名 中心  问题

数据库服务搭建 服务基本管理  基本使用  建表 数据类型  约束条件  修改表 键值

+++++RDBMS1_DAY03 mysql-5.7
1 数据导入与导出
	1.1 默认检索路径
		1.1.1 查看         
mysql> show variables like "secure_file_priv";
+------------------+-----------------------+
| Variable_name    | Value                 |
+------------------+-----------------------+
| secure_file_priv | /var/lib/mysql-files/ |
+------------------+-----------------------+
1 row in set (0.00 sec)

		1.1.2 修改
]# vim  /etc/my.cnf
	[mysqld]
	secure_file_priv="/myload"
:wq
]# mkdir /myload		
]# chown  mysql /myload/
]# systemctl  restart mysqld

]# mysql  -uroot  -p123qqq...A
mysql> show variables like "secure_file_priv";
+------------------+----------+
| Variable_name    | Value    |
+------------------+----------+
| secure_file_priv | /myload/ |
+------------------+----------+
1 row in set (0.00 sec)
				休息15分钟 到 10：10

	1.2 数据导入：把系统文件的内容存储到数据库的表里
		1 命令格式
		  mysql> load  data  infile   "目录名/文件名" 
into   table  库名.表名 fields terminated   by   "分隔符" lines  terminated  by   "\n";
		2 注意事项？
		3 数据导入步骤
			建库
			建表
			拷贝文件到检索目录下
			导入数据
			查看表记录
		4 例子
mysql> create database db3;
mysql> create table db3.user(
name char(50) , password char(1) ,uid  int  , gid  int , comment  varchar(150) , homedir  char(60) , shell char(50) 
);

mysql> system  cp /etc/passwd  /myload/

mysql> load data infile  "/myload/passwd" into table db3.user fields terminated by ":" lines terminated  by "\n" ;

mysql> alter table db3.user  add id int primary key  auto_increment first;

mysql> select  * from db3.user ;

mysql> select  * from db3.user where id = 1;
	
	时间15分钟到 10：48   休息到 11：10 

	1.3 数据导出 :把表记录存储到系统文件里
		命令格式：
		sql查询命令  into   outfile   “目录名/文件名";

		sql查询命令   into   outfile   “目录名/文件名" 
                fields  terminated   by   “分隔符”; 
		
	        sql查询命令   into   outfile   “目录名/文件名”
                fields  terminated   by   “分隔符”
                lines   terminated   by   “\n” ;  

		注意事项？ 
		例子：
mysql> select * from db3.user where id <= 2 into outfile  "/myload/user1.txt" ;

mysql> select * from db3.user where id <= 2 into outfile  "/myload/user2.txt" 
    -> fields  terminated by "#";


mysql> select * from db3.user where id <= 2 into outfile  "/myload/user3.txt"  fields  terminated by "#"  lines terminated by "!!!";

mysql> select name,uid,shell from db3.user where id <= 3 into outfile "/myload/user4.txt";

mysql> system ls /myload

mysql> system cat /myload/user1.txt
		
2 管理表记录
	2.1 插入表记录 insert into
	    插入1条表记录给所以字段赋值
		insert into 库.表   values(值列表)；
		
	    插入多条表记录给所以字段赋值
		insert into 库.表   values(值列表),(值列表)....;

	    插入1条表记录给指定字段赋值
		insert into 库.表(字段名列表)  values(值列表);	

	    插入多条表记录给指定字段赋值
		insert into 库.表(字段名列表)  values(值列表),(值列表)....;

mysql> insert into db3.user(name)values("bob");	
mysql> insert into  db3.user(name,uid,homedir)  values("bob",19,"/bin/bash");	
mysql> insert into db3.user values (23,"jerry","x",2000,2000,"student user","/home/jerry","/bin/bash");
		
	2.2 查询表记录 select 
		select 字段名列表 from 库.表 where 条件 ；
		
mysql> select  * from  db3.user; 
mysql> select name,uid ,password from db3.user;
mysql> select name,uid ,password from db3.user where shell="/sbin/nologin";
	
	2.3 修改记录字段值 
		update  库.表  set 字段名=值，字段名=值【 where 条件 】；
mysql> update db3.user set password="a" ;
mysql> update db3.user set password="x" where  name="root";

	2.4 删除表记录 （删除行）
		delete    from   库名.表名  【where  条件表达式】;
        mysql> delete from  db3.user where name="bob";

3 匹配条件 （适用于select update  delete）
	3.1 基本匹配条件
		1 数值比较   =  !=  >  >=  <  <=
mysql> select name from db3.user where uid = 0 ;
mysql> select name,uid,gid from db3.user where uid = gid;
mysql> select name,uid,gid from db3.user where uid != gid;
mysql> select  * from  db3.user where id <= 10;
		2 字符比较  =  !=
mysql> select name ,shell from db3.user where shell != "/bin/bash";
mysql> select name ,shell from db3.user where shell = "/bin/bash";
mysql> select name  from db3.user where name="mysql";
		3 空 is null
		非空 is not null
mysql> select name , shell from db3.user where shell  is not null;
mysql> select name , shell from db3.user where shell  is null;

mysql> insert into db3.user(name)values (null),("null"),("");
mysql> select  id ,name from db3.user;
mysql> select id , name from db3.user where name="null";
mysql> select id , name from db3.user where name="";
mysql> select id , name from db3.user where name is null;
		4 逻辑匹配 （多个条件）
		  逻辑与 and  多个条件必须都成立
		  逻辑或 or   多个条件成立即可
		  逻辑非 ！/ not 取反             !=  is not null
mysql> select  * from db3.user where  uid=0  or name="bin" ;
mysql> select  * from db3.user where  uid=0  and name="bin" ;
		5  范围内匹配/去重显示
			in  (值列表) 	在…里…
			not  in  (值列表)	不在…里…
			between 数字 and  数字	在…之间…
			distinct  字段名	去重显示
mysql> select name ,uid from db3.user where uid in  (1 , 9 ,3 ,7);
mysql> select name from db3.user where name in ("demo","sync","bin","root");

mysql> select name , shell  from db3.user 
       where shell not in  ("/bin/bash","/sbin/nologin");

mysql> select name ,uid from db3.user where uid between 10 and 40 ;

mysql> select  distinct  gid from db3.user  where id <= 10;
	3.2 高级匹配条件
		1、 like 模糊查询
		where 字段名  like   '通配符'
			_      表示1个字符
			%     表示0~n个字符
mysql> select name from db3.user where name like  '___' ;
mysql> select name from db3.user where name like  'a__' ;
mysql> select name from db3.user where name like  'a%' ;
mysql> select name from db3.user where name like  '%a%' ;
mysql> select name from db3.user where name like  '__%__' ;
mysql> select name from db3.user where name like  '%a%' ;
		2、正则表达式
		   where 字段名  regexp   '正则表达式’
		    元字符   ^   $   .   [ ]   *    | 
mysql> insert into db3.user(name)values("9yaya"),("ya7ya"),("yaya6");
mysql> select name from db3.user where name   regexp '^a|t$' ;
mysql> select  name from  db3.user where name regexp '^[0-9]';
mysql> select  name from  db3.user where name regexp '[0-9]'
mysql> select name ,uid from  db3.user  where uid regexp  '..';
mysql> select name ,uid from  db3.user  where uid regexp  '^..$';
mysql> select name ,uid from  db3.user  where uid regexp  '^...$';

		3 四则运算  +  -  *  /  %
mysql> alter table db3.user add  age  tinyint unsigned default 10 after name;

mysql> select name ,uid , gid , uid+gid  zh  from db3.user;

mysql> select name ,age , 2019 - age csnf from db3.user where name="root";

mysql> select name ,uid from db3.user where  uid % 2  = 0 ;

mysql> update db3.user set uid=uid+1 where uid <= 10;

mysql> update db3.user set uid=uid-1 where uid <= 10;

mysql> select name , uid , gid , (uid+gid)/2 pjz from db3.user where name = "bin";
	3.3 操作查询结果
		1 聚集函数(对数据做统计的命令)
			avg(字段名)			//统计字段平均值
			sum(字段名) 			//统计字段之和
			min(字段名) 			//统计字段最小值
			max(字段名) 			//统计字段最大值
			count(字段名) 			//统计字段值个数

mysql> select  avg(gid) from  db3.user;
mysql> select  max(uid) from db3.user;
mysql> select  min(uid) from db3.user;
mysql> select  sum(uid) from db3.user;
mysql> select count(name) from  db3.user where shell != "/bin/bash";
mysql> select  count(*) from db3.user;

		2 查询结果排序 order by  字段  asc/desc ;
mysql> select name ,uid from db3.user where uid <= 1000 order by uid ;
mysql> select name ,uid from db3.user where uid <= 1000 order by uid  desc;

		3 查询结果分组 group by  字段名；
mysql> select shell from db3.user where uid <= 100 group by shell ;
mysql> select shell from db3.user  group by shell ;

		4 查询结果过滤 having 条件；
mysql> select  name from db3.user where  uid <= 3000;
mysql> select  name from db3.user where  uid <= 3000  having name="mysql";

		5 限制查询结果显示行数 limit
			只显示查询结果的头几行   limit 数字 ；
mysql> select * from db3.user where id <= 10  ;
mysql> select * from db3.user where id <= 10  limit 1;
mysql> select * from db3.user where id <= 10  limit 2;

			只显示查询结果指定行     limit 起始行，行个数

mysql> select  * from db3.user where id <= 10  limit 0,2;
mysql> select  * from db3.user where id <= 10  limit 1,2;
mysql> select  * from db3.user where id <= 10  limit 3,3;

4 MySQL管理工具
命令行 mysql
安装软件，由软件提供管理数据库的页面（web页面或软件自己提供的图形窗口）


]# scp phpMyAdmin-2.11.11-all-languages.tar.gz  root@192.168.4.50:/root/

安装图形工具phpmyadmin
	# yum  -y  install  httpd  php  php-mysql
# systemctl start httpd 
# systemctl  enabled  httpd 

# tar  -zxvf  phpMyAdmin-2.11.11-all-languages.tar.gz
# mv  phpMyAdmin-2.11.11-all-languages  /var/www/html/phpmyadmin

# cd /var/www/html/phpmyadmin/
# cp  config.sample.inc.php   config.inc.php  //创建主配置文件

# vim  config.inc.php
17   $cfg[‘blowfish_secret’] = ‘plj123’;  //cookies参数
31   $cfg[‘Servers’][$i][‘host’] = ‘localhost’; //数据库服务器IP地址
 
访问软件 http://192.168.4.50/phpmyadmin
	用户root
	密码
+++++++++++RDBMS_DAY04
数据库服务器192.168.4.50 、192.168.4.51
一、用户授权
	1.1 什么是用户授权：在数据库服务器上添加客户端连接时使用的用户，并设置访问权限。

	1.2 为什么要学习用户授权：默认只允许数据库管理员root用户本机登陆

	1.3 怎样配置用户授权：授权命令格式
	mysql> grant  权限列表 on 数据库名 to 用户名@"客户端地址" identified  by  "密码" [ with grant option ] ; 

	权限列表: 
	个别权限 select , insert  ,update ,delete
		 update(name,uid)

	所有权限 all
	无权限   usage	

	数据库名:
		库名.表名	db3.user
		某个库		db3.*
		所有库/表       *.*

	用户名：
		客户端连接时使用的名字，授权时自定义即可
	
	客户端地址：
		本机 localhost
		某1台主机  192.168.4.51
		某个网段   192.168.4.%
		所有主机   %
	密码 连接使用密码 ，要与数据库服务器的密码策略匹配

	with grant option  可选项，授权用户有执行grant命令的权限
	1.4 例子：
mysql>  grant all  on db4.* to yaya@"%" identified by "123qqq...A";

mysql> show grants for yaya@"%";

mysql> set password for yaya@"%"=password("123qqq...A");

mysql> drop user  yaya@"%" ;

	客户端连接
]# mysql -h192.168.4.50  -uyaya  -p123qqq...A

	相关命令
	select user();
	show grants;
	set password=password("123aaa...A");

验证权限 ： 建库 建表 对记录做 增删改查

	授权库mysql:记录授权信息
	查看表记录可以获取用户权限；也可以通过更新记录，修改用户权限
user表    记录已有的授权用户及权限
db表       记录已有授权用户对数据库的访问权限
tables_priv表       记录已有授权用户对表的访问权限
columns_priv表   记录已有授权用户对字段的访问权限

mysql> grant all on  *.*  to root@"%" identified by "123qqq...A" with grant option;

mysql> select host ,user from mysql.user;
mysql> select  * from mysql.user where user="root" and host="localhost"\G;
mysql> show grants from root@"%";

]# mysql -h192.168.4.50 -uroot -p123qqq...A
mysql> show grants;
> create database bbsdb;
> create table bbsdb.a(name char(10));
> insert into db3.user(name)values("jerry");

> grant all on bbsdb.* to yaya88@"localhost" identified by "123qqq...A";

> grant select,update(name,uid) on db3.user to yaya99@"192.168.4.51" identified by "123qqq...A";

mysql> show grants  for yaya99@"192.168.4.51";

mysql> select  * from  mysql.tables_priv 
where user="yaya99" and host="192.168.4.51" \G;

mysql> update  mysql.tables_priv set Table_priv="select,insert,delete" 
where user="yaya99" and host="192.168.4.51";

mysql> flush privileges;

mysql> show grants  for yaya99@"192.168.4.51";

]# mysql  -h192.168.4.50 -uyaya99  -p123qqq...A
> show grants;


用户授权
验证用户权限
查看用户权限
相关命令
授权库
删除授权用户
		撤销权限：删除已有授权用户的权限
		  命令格式： mysql> revoke  权限列表  on  库名.表   from    
             用户名@"客户端地址";

> select user ,host from  mysql.user;
> show grants  for  root@"%";
> revoke grant option on  *.* from  root@"%";
> show grants  for  root@"%";
> revoke update , delete on *.*  from  root@"%";
> show grants  for  root@"%";

> revoke all  on  *.* from root@"%" ;
mysql> show  grants for root@"%";

> drop user root@"%";


1.2 root密码
	1.2.1 恢复 （ 时间10分钟到 14：57）
		]# vim /etc/my.cnf
			[mysqld]
			skip-grant-tables
		:wq

		]# systemctl  restart mysqld
		]# mysql
mysql> update mysql.user  set  authentication_string=password("123qqq...A")
       where  user="root" and host="localhost" ;
mysql> flush privileges;
mysql> exit

		]# vim /etc/my.cnf
			[mysqld]
			#skip-grant-tables
			:wq
		]# systemctl  restart mysqld
		]# mysql -uroot -p123qqq...A

	1.2.2 修改
]# mysqladmin -hlocalhost  -uroot  -p   password "abc123...Q"
Enter password:输入旧密码

二、完全备份
	数据备份相关概念？
		备份方式？ 
		备份策略？完全备份 、 备份新产生的数据（增量备份 或差异备份）

	物理备份与恢复 （练习时间10分钟 到 15：43） 
[root@host50 ~]#
  201  mkdir /dbbak
  202  ls /dbbak/
  203  cp -r /var/lib/mysql /dbbak/
  204  ls /dbbak/
  205  ls /dbbak/mysql/
  206  tar -zcvf /dbbak/mysql.tar.gz  /var/lib/mysql/*
  207  ls /dbbak/
  208  scp -r /dbbak/mysql  root@192.168.4.51:/root/

[root@host51 ~]#
  737  ls /root/mysql
  738  systemctl  stop mysqld
  739  ls /var/lib/mysql
  740  rm -rf  /var/lib/mysql
  741  cp -r /root/mysql  /var/lib/
  742  ls /var/lib/mysql
  743  chown  -R mysql:mysql /var/lib/mysql
  744  ls -ld /var/lib/mysql
  745  ls -l /var/lib/mysql
  748  systemctl  start mysqld
  749  ps -C mysqld
  750  netstat -utnlp  | grep mysqld
  751  mysql -uroot -pabc123...Q
       > show databases; 

   完全备份 命令格式
   ]#mysqldump   -uroot    -p密码    库名  >  目录/xxx.sql

   备份时库名表示方式：
	--all-databases 或  -A      	//所有库
	数据库名			//单个库
	数据库名  表名          		//单张表
	-B  数据库1  数据库2 		//多个库

   完全恢复命令格式
   ]#mysql  -uroot    -p密码   [ 库名 ]   <   目录/xxx.sql


]# mysqldump -uroot -pabc123...Q -A  > /dbbak/all.sql
]# mysqldump -uroot -pabc123...Q db3  > /dbbak/db3.sql
]# mysqldump -uroot -pabc123...Q db3 user > /dbbak/db3_user.sql
]# mysqldump -uroot -pabc123...Q -B mysql db3  > /dbbak/twodb.sql
[root@host50 ~]# ls /dbbak/*.sql
[root@host50 ~]# scp /dbbak/db3_user.sql  root@192.168.4.51:/opt/
[root@host50 ~]# scp -r /dbbak/twodb.sql  root@192.168.4.51:/opt/

[root@host51 ~]# mysql -uroot -pabc123...Q  db3  < /opt/db3_user.sql
[root@host51 ~]# mysql -uroot -pabc123...Q  db3
> show tables;
> select * from  user;

[root@host51 ~]# mysql -uroot -pabc123...Q < /opt/twodb.sql
[root@host51 ~]# mysql -uroot -pabc123...Q
> select user ,host from mysql.user;
> use db3;
> show tables;

三、增量备份
	启用mysql服务的binlog日志文件实现对数据的时时增量备份
	3.1 binlog日志介绍
	3.2 启用binlog日志
]# vim /etc/my.cnf
[mysqld]
server_id=50
log_bin
:wq
]# systemctl restart mysqld

]# mysql -uroot -pabc123...q
mysql> show master status;
mysql> create table db3.usera(id int);
mysql> insert into db3.usera values(101);
mysql> show master status;
mysql> exit

[root@host50 mysql]# scp /var/lib/mysql/host50-bin.000001  root@192.168.4.51:/opt/
	3.3 使用binlog日志文件恢复数据
命令格式]# mysqlbinlog  目录/文件 | mysql -uroot -pabc123...Q
例子[root@host51 ~]# mysqlbinlog /opt/host50-bin.000001 | mysql -uroot -pabc123...Q
]# mysql -uroot -pabc123...Q
> select  * from db3.usera;


		自定义日志文件名和存储目录  09:21
]# vim /etc/my.cnf
	[mysqld]
	server_id=50
	log_bin=/mylog/plj
:wq
]# mkdir /mylog
]# chown  mysql  /mylog

]# systemctl restart  mysqld

]# ls /mylog/plj.*

]# mysql -uroot -pabc123...Q
> show master status;

		查看正在使用的日志文件 show master status;

		手动创建新的日志文件  09:40
			]# systemctl  restart mysqld
			mysql> flush logs;
			]# mysql -uroot -pabc123...Q  -e 'flush logs'
]# mysqldump -uroot -pabc123...Q  --flush-logs db3 > /dbbak/db3.sql			
		删除已有的日志文件
			mysql> purge  master  logs  to 'plj.000004';

			mysql> reset master ;

		修改日志记录格式  时间到 10：32 
]# vim /etc/my.cnf
	[mysqld]
	binlog_format="mixed"
:wq
]# systemctl restart mysqld

]# mysql -uroot -pabc123...Q
mysql> show variables like "binlog_format";

mysql> desc db3.user;
mysql> insert into db3.user(name)values("plj");
mysql> insert into db3.user(name)values("plja");
mysql> insert into db3.user(name)values("pljb");
mysql> insert into db3.user(name)values("pljc");
mysql> insert into db3.user(name)values("pljd");
mysql> update db3.user set password="F" where name like "plj%";
mysql> select password from db3.user where name like "plj%";
mysql> delete from db3.user where name like "plj%";
mysql> exit

]# mysqlbinlog  /mylog/plj.000002  | grep -i insert
]# mysqlbinlog  /mylog/plj.000002  | grep -i update
]# mysqlbinlog  /mylog/plj.000002  | grep -i delete
]# mysqlbinlog  /mylog/plj.000002  | grep -i select

		日志文件如何区分记录多条sql命令（日志记录sql命令的方式）
		偏移量 
                       --start-position=数字  --stop-position=数字

		时间点 
--start-datetime="yyyy-mm-dd hh:mm:ss"  --stop-datetime="yyyy-mm-dd hh:mm:ss"

		读取日志指定范围的sql命令恢复数据

[root@host50 mylog]# scp /mylog/plj.000002  root@192.168.4.51:/opt/

[root@host51 ~]# ls /opt/plj.000002

[root@host51 ~]# mysqlbinlog --start-position=325  --stop-position=1708 /opt/plj.000002 | mysql -uroot -pabc123...Q

[root@host51 ~]# mysql -uroot -pabc123...Q -e "select name from db3.user where name like 'plj%'"


+++++RDBMS1_DAY05---数据备份与恢复
		1 软件介绍
		2 安装软件
[root@room9pc17 mysql]# scp percona-xtrabackup-24-2.4.7-1.el7.x86_64.rpm  root@192.168.4.50:/root/

[root@room9pc17 mysql]# scp libev-4.15-1.el6.rf.x86_64.rpm  root@192.168.4.50:/root/

[root@host50 ~]# rpm -ivh libev-4.15-1.el6.rf.x86_64.rpm
[root@host50 ~]# yum -y  install percona-xtrabackup-24-2.4.7-1.el7.x86_64.rpm

[root@host50 ~]# innobackupex --help 
[root@host50 ~]# man  innobackupex

	  	3 命令格式  innobackupex  <选项>

		4 常用选项
			--user  --password   --no-timestamp

		5 备份命令格式
			完全备份与恢复
			恢复单张表
			增量备份与恢复

innobackupex完全备份与恢复
		完全备份
[root@host50 ~]# innobackupex --user root  --password abc123...Q  /allbak --no-timestamp

[root@host50 allbak]# scp  -r  /allbak root@192.168.4.51:/opt/

		完全恢复
[root@host51 ~]# rpm -ivh libev-4.15-1.el6.rf.x86_64.rpm 
[root@host51 ~]# yum -y install percona-xtrabackup-24-2.4.7-1.el7.x86_64.rpm
[root@host51 ~]# ls /opt/allbak/

	       数据完全恢复步骤
		    停止数据库服务
		    清空数据库目录
		    准备恢复数据
		    拷贝备份数据到数据库目录下
		    修改目录的所有者/组用户为mysql
		    启动服务
		    管理员登陆查看数据
]# netstat -utnlp  | grep  :3306
]# systemctl  stop mysqld
]# netstat -utnlp  | grep  :3306
]# rm -rf /var/lib/mysql/*
]# ls /var/lib/mysql
]# cat /opt/allbak/xtrabackup_checkpoints 
]# innobackupex  --apply-log  /opt/allbak/
]# cat /opt/allbak/xtrabackup_checkpoints 
]# innobackupex  --copy-back /opt/allbak/
]# chown  -R mysql:mysql /var/lib/mysql
]# ls -l /var/lib/mysql 
]# systemctl  start mysqld
]# netstat -utnlp  | grep  :3306
]# mysql -uroot -pabc123...Q
> show databases;
> select  * from db5.a;
> select  * from db5.b;

		使用完全备份文件，恢复单张表的所有数据

host50]# innobackupex --user root  --password abc123...Q  --databases="db5" /db5bak  --no-timestamp

host50]# ls /db5bak/


mysql> delete from db5.b;
mysql> select * from db5.b;
mysql> select * from db5.a;
		恢复单张表的所有数据步骤：
			删除表空间文件
			在备份文件里，导出表信息
			把导出表信息文件拷贝到数据库目录下
			导入表信息
			删除表信息文件
			查看表记录
> alter  table  db5.b  discard  tablespace;
]# innobackupex --apply-log --export  /db5bak
[root@host50 allbak]# cp /db5bak/db5/b.{cfg,exp,ibd} /var/lib/mysql/db5/
[root@host50 allbak]# ls /var/lib/mysql/db5/b.*
]# chown mysql:mysql /var/lib/mysql/db5/b.*
> alter  table  db5.b   import  tablespace;		
]# rm  -rf /var/lib/mysql/db5/b.cfg
]# rm  -rf /var/lib/mysql/db5/b.exp
mysql> select  * from b;
		
		增量备份与恢复

增量备份：备份上次备份后，所有新产生的数据

		增量备份 192.168.4.50

周一 首次备份，备份所有数据
	[root@host50 ~]# innobackupex --user root --password abc123...Q  /fullbak --no-timestamp


周二 增量备份
	 插入信息记录
	 [root@host50 ~]# innobackupex --user root --password abc123...Q  --incremental /new1dir --incremental-basedir=/fullbak --no-timestamp

周三 增量备份
	插入信息记录
 [root@host50 ~]# innobackupex --user root --password abc123...Q  --incremental /new2dir --incremental-basedir=/new1dir --no-timestamp

[root@host50 ~]# scp -r /fullbak root@192.168.4.51:/opt/
[root@host50 ~]# scp -r /new1dir root@192.168.4.51:/opt/
[root@host50 ~]# scp -r /new2dir root@192.168.4.51:/opt/ 

		增量恢复 192.168.4.51
			停止服务
			清空数据库目录
			准备恢复数据
			合并数据
			拷贝数据到数据库目录下
			修改数据库目录的所有者和组用户为mysql
			启动服务
			查看数据


]# systemctl  stop mysqld
]# netstat -utnlp  | grep  :3306
]# rm -rf /var/lib/mysql/*

]# ls /opt/
]# innobackupex --apply-log --redo-only /opt/fullbak
]# innobackupex --apply-log --redo-only /opt/fullbak --incremental-dir=/opt/new1dir
]# innobackupex --apply-log --redo-only /opt/fullbak --incremental-dir=/opt/new2dir
]# rm -rf /opt/new1dir/
]# rm -rf /opt/new2dir/
]# innobackupex --copy-back /opt/fullbak
]# chown  -R mysql:mysql /var/lib/mysql
]# systemctl  start mysqld
]# netstat  -utnlp  | grep :3306
]# mysql -uroot -pabc123...Q

+++++++RDBMS2_DAY01
一、mysql主从同步
	1.1 主从同步介绍？
	1.2 工作过程？

	1.3 配置mysql主从同步
		1.3.1 拓扑结构
		1.3.2 配置主服务器
			[root@host51 ~]# vim /etc/my.cnf
			[mysqld]
			server_id=51
			log_bin=master51
			:wq
			[root@host51 ~]# systemctl  restart mysqld

			[root@host51 ~]# ls /var/lib/mysql/master51.*

			[root@host51 ~]# mysql -uroot -p123456
mysql> grant replication slave on *.* to repluser@"%" identified by "123qqq...A";
mysql> show master status;
+-----------------+----------+--------------+------------------+-------------------+
| File            | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |
+-----------------+----------+--------------+------------------+-------------------+
| master51.000001 |      441 |              |                  |                   |
+-----------------+----------+--------------+------------------+-------------------+
1 row in set (0.00 sec)
		1.3.3 配置从服务器
[root@52 ~]# vim /etc/my.cnf
	[mysqld]
	server_id=52
:wq
[root@52 ~]# systemctl restart mysqld

[root@51 ~]# mysqldump -uroot -p123qqq...A --master-data db5 > /root/db5.sql
[root@51 ~]# scp /root/db5.sql  root@192.168.4.52:/opt/

[root@52 ~]# mysql -uroot -p123qqq...A -e 'create database db5'
[root@52 ~]# mysql -uroot -p123qqq...A  db5  < /opt/db5.sql 
[root@52 ~]# mysql -uroot -p123qqq...A -e 'use db5 ; show tables'
[root@52 ~]# grep master51 /opt/db5.sql 
CHANGE MASTER TO MASTER_LOG_FILE='master51.000001', MASTER_LOG_POS=441;
[root@52 ~]# 

[root@52 ~]# mysql -uroot -p123qqq...A
mysql> change master to  master_host="192.168.4.51" , master_user="repluser",
    -> master_password="123qqq...A" , master_log_file="master51.000001",master_log_pos=441;
mysql> start slave ;
mysql> show slave status\G;
		Master_Host: 192.168.4.51
		Slave_IO_Running: Yes
                Slave_SQL_Running: Yes
						时间15分钟到 10：43 
		相关文件
		master.info	主库信息

		relay-log.info	中继日志信息

		主机名-relay-bin.xxxxxx	中继日志

		主机名-relay-bin.index	索引文件
	1.4 排错
  Last_IO_Error: IO线程报错信息
  Last_SQL_Error:SQL线程报错信息

  stop  slave ;
		根据提示解决问题
  start slave;

  show slave status\G;

	终极解决办法：
		删除相关文件的4种文件后 重启数据库服务，重新指定主服务器信息。

        自己排错时间
	休息+排错30分钟 到  11：23  

	1.5 验证配置
	   1.5.1 添加授权用户（给客户端连接使用）
		[root@host51 ~]# mysql -uroot -p123qqq...A
		mysql> create database bbsdb ;
		mysql> grant all on bbsdb.* to yaya108@"%" identified by "123qqq...A";
		mysql> grant all on db5.* to yaya108@"%" identified by "123qqq...A";

	   1.5.2 客户端使用授权用户连接主服务器51 对数据做访问
		[root@mysql50 ~]# mysql -h192.168.4.51 -uyaya108 -p123qqq...A
		mysql> show grants;
		mysql> create table bbsdb.a(id int);
		mysql> insert into bbsdb.a values(100);
		mysql> select  * from bbsdb.a;
		+------+
		| id   |
		+------+
		|  100 |
		+------+
		mysql> 

	1.5.3 在从服务器本机能够查看到和主服务器一样的数据
		[root@mysql52 ~]# mysql -uroot -p123qqq...A -e 'select * from bbsdb.a'

	时间到 11：50 
		
二、主从同步模式
	2.1主从同步结构模式
		2.1.1 主从同步结构模式 ?
		2.1.2 配置mysql一主多从结构
			要求：把数据库服务器53 也配置为51的从服务器
			
			配置从服务器 192.168.4.53 步骤如下： 15分钟时间 到14：35 
			[root@host53 ~]#  vim /etc/my.cnf
						[mysqld]
						server_id=53
					   :wq
			[root@host53 ~]# systemctl restart mysqld	
			
			[root@host51 ~]# mysqldump -uroot -p123qqq...A --master-data -B db5  bbsdb > /root/bbsdb.sql 

			[root@host51 ~]# ls /root/*.sql
					/root/bbsdb.sql

			[root@host51 ~]# scp /root/bbsdb.sql  root@192.168.4.53:/root/

			[root@host53 ~]# mysql -uroot -p123456 -e 'create database bbsdb'

			[root@host53 ~]# mysql -uroot -p123456 bbsdb < /root/bbsdb.sql 

			[root@host53 ~]# mysql -uroot -p123456 -e 'use bbsdb ;show tables'
 
			[root@host53 ~]# grep master51 /root/bbsdb.sql 
CHANGE MASTER TO MASTER_LOG_FILE='master51.000003', MASTER_LOG_POS=1315;

			[root@host53 ~]# mysql -uroot -p123456 
mysql> change master to master_host="192.168.4.51" , master_user="repluser" , master_password="123qqq...A" , master_log_file="master51.000003" , master_log_pos=1315;

mysql> start slave ;

mysql> show slave status\G;
	Master_Host: 192.168.4.51
	Slave_IO_Running: Yes
        Slave_SQL_Running: Yes


		2.1.3 配置mysql主从从结构

		2.1.4 配置mysql主主结构(2台数据库服务器互为主从)
		要求：把数据库服务器192.168.4.56和192.168.4.57 
		      2台服务器配置为互为主从结构。

	2.2主从同步复制模式
		2.2.1 主从同步复制模式
		      介绍？


		2.2.2 配置半同步复制模式 （192.168.4.54）
			命令行配置
			    1 查看是否允许动态加载模块
mysql> show variables  like  'have_dynamic_loading';
+----------------------+-------+
| Variable_name        | Value |
+----------------------+-------+
| have_dynamic_loading | YES   |
+----------------------+-------+
1 row in set (0.00 sec)

mysql> 
			   2 命令行加载插件
mysql> install  plugin  rpl_semi_sync_master   SONAME   "semisync_master.so";
mysql> install  plugin  rpl_semi_sync_slave    SONAME   "semisync_slave.so";


			   3 查看模块是否加载
mysql> select  plugin_name, plugin_status from  information_schema.plugins  
where plugin_name like '%semi%'; 
   
+----------------------+---------------+
| plugin_name          | plugin_status |
+----------------------+---------------+
| rpl_semi_sync_master | ACTIVE        |
| rpl_semi_sync_slave  | ACTIVE        |
+----------------------+---------------+
2 rows in set (0.00 sec)

			 4 启用半同步复制
mysql> set global rpl_semi_sync_master_enabled=1;
mysql> set global rpl_semi_sync_slave_enabled=1;

			 5 查看是否启用半同步复制
mysql>  show  variables  like  "rpl_semi_sync_%_enabled";
+------------------------------+-------+
| Variable_name                | Value |
+------------------------------+-------+
| rpl_semi_sync_master_enabled | ON    |
| rpl_semi_sync_slave_enabled  | ON    |
+------------------------------+-------+
 

			永久配置 （/etc/my.cnf）
			]# vim /etc/my.cnf
			[mysqld]
plugin-load = "rpl_semi_sync_master=semisync_master.so;rpl_semi_sync_slave=semisync_slave.so"
rpl_semi_sync_master_enabled=1
rpl_semi_sync_slave_enabled=1
			:wq

			[root@host54 ~]# systemctl  restart mysqld
			]# mysql -uroot -p123qqq...A
mysql> show  variables  like  "rpl_semi_sync_%_enabled";
+------------------------------+-------+
| Variable_name                | Value |
+------------------------------+-------+
| rpl_semi_sync_master_enabled | ON    |
| rpl_semi_sync_slave_enabled  | ON    |
+------------------------------+-------+
2 rows in set (0.00 sec)

mysql> 

+++++RDBMS2_DAY02
一、数据读写分离
	1.1 数据读写分离 ？

	1.2 部署maxscale服务
		1.2.1 安装软件
[root@57 ~]# netstat -utnlp  | grep  :3306
[root@57 ~]# systemctl  stop mysqld ;  systemctl disable mysqld
			]# rpm  -ivh  maxscale-2.1.2-1.rhel.7.x86_64.rpm

			配置文件
			命令
			日志文件
			服务程序
[root@57 ~]# ls /etc/maxscale.cnf
/etc/maxscale.cnf
[root@57 ~]# 
[root@57 ~]# max
maxadmin        maxbinlogcheck  maxpasswd       
maxavrocheck    maxkeys         maxscale        
[root@57 ~]# 
[root@57 ~]# ls /var/log/maxscale/
[root@57 ~]# 
[root@57 ~]# rpm -qa  | grep -i maxscale
maxscale-2.1.2-1.x86_64
[root@57 ~]# 
[root@57 ~]# rpm -ql maxscale

		1.2.2 修改主配置文件
[root@57 ~]# cp /etc/maxscale.cnf /root/
[root@57 ~]# vim  /etc/maxscale.cnf


		1.2.3 配置数据库服务器（  server1 和  server2 ）
maxscalemon 用户授权

mysql> grant replication slave, replication client on *.* to maxscalemon@'%'  identified by  '123qqq...A'; 

maxscalerouter用户授权

mysql> grant select on mysql.* to maxscalerouter@"%" identified by '123qqq...A';   
		1.2.4 启动服务
		]# maxscale -f /etc/maxscale.cnf 
	        ]# killall -9 maxscale           //停止服务命令

		1.2.5 查看服务信息
   		]# netstat -utnlp  | grep :4016
   		]# netstat -utnlp  | grep :4006
   		]# netstat -utnlp  | grep maxscale
   		]# ls /var/log/maxscale/   日志文件目录
   		]# vim /var/log/maxscale/maxscale.log  查看日志内容 
休息到 11：20 

		1.2.6 查看监控信息
[root@host57 ~]# maxadmin -uadmin -pmariadb -P4016
MaxScale> 
MaxScale> list servers
Servers.
-------------------+-----------------+-------+-------------+--------------------
Server             | Address         | Port  | Connections | Status              
-------------------+-----------------+-------+-------------+--------------------
server1            | 192.168.4.51    |  3306 |           0 | Master, Running
server2            | 192.168.4.52    |  3306 |           0 | Slave, Running
-------------------+-----------------+-------+-------------+--------------------
MaxScale>  exit
		
	     1.2.7 测试配置
			1.2.7.1 在主服务器51 ， 添加客户端访问数据的连接用户
		host51]# mysql -uroot -p123qqq...A
mysql> create database  db7;
mysql> create table db7.a(id int);
mysql> grant select , insert  on  db7.*  to  plj99@"%" identified by "123qqq...A";
		
		host52]# mysql  -uroot  -p123qqq...A  -e  'show grants for plj99@"%"'


			1.2.7.2 在客户端连接服务器57 访问数据
		client50]# mysql -h192.168.4.57  -P4006  -uplj99  -p123qqq...A
		           mysql> show grants;
			   mysql> select  * from db7.a;
			   mysql> insert into db7.a values(100);
			   mysql> select * from  db7.a;

	时间10分钟 到  14：17 

			1.2.7.3 测试数据读写分离
				在从服务器52本机向表里插入记录
			        	]# mysql -uroot -p123qqq...A 
					mysql> insert into db7.a values(52);
					mysql> select  * from db7.a;

				在主服务器51本机查看表记录
					mysql> select  * from db7.a;
				
				在客户端50连接服务器57 访问数据
		client50]# mysql -h192.168.4.57  -P4006  -uplj99  -p123qqq...A	

休息到 15：05 		

二、mysql多实例
	准备主机 克隆1台新的虚拟机配置Ip地址 eth0  192.168.4.58/24 
            软件 mysql-5.7.20-linux-glibc2.12-x86_64.tar.gz

	2.1 mysql多实例 介绍

	2.2 配置mysql多实例 ， 步骤如下：
		1 安装软件

		2 创建并编辑主配置文件
		]# vim /etc/my.cnf
[mysqld_multi]
mysqld = /usr/local/mysql/bin/mysqld_safe
mysqladmin = /usr/local/mysql/bin/mysqladmin
user = root

[mysqld1]
datadir=/dir1
port=3307
socket=/dir1/mysqld1.sock
log-error=/dir1/mysqld1.err
pid-file=/dir1/mysqld1.pid

[mysqld2]
datadir=/dir2
port=3308
socket=/dir2/mysqld2.sock
log-error=/dir2/mysqld2.err
pid-file=/dir2/mysqld2.pid
[root@host58 ~]# 

		[root@host58 ~]# mkdir /dir1
		[root@host58 ~]# mkdir /dir2

		3 启动多实例服务
			3.1 启动编号1的实例服务 
				]# mysqld_multi  start  1
				]# ls /dir1
				]# netstat -utnlp  | grep :3307

]# mysql -uroot -p'zdkk%:q6HCe9' -S /dir1/mysqld1.sock
mysql> alter user  root@"localhost" identified by "123456";
mysql> exit;

			]# mysql -uroot -p123456  -S /dir1/mysqld1.sock
			]# mysqld_multi  --user=root --password=123456 stop 1
			]# netstat -utnlp  | grep :3307

			3.2 启动编号2 的实例服务
				]# mysqld_multi  start  2
                                ]# ls /dir2
                                ]# netstat -utnlp  | grep :3308

]# mysql -uroot -p'zdkk%:q6HCe9' -S /dir2/mysqld2.sock
mysql> alter user  root@"localhost" identified by "123456";
mysql> exit;

                        ]# mysql -uroot -p123456  -S /dir2/mysqld2.sock
                        ]# mysqld_multi  --user=root --password=123456 stop 2
                        ]# netstat -utnlp  | grep :3308

+++++RDBMS2_DAY03 数据分片
		购物 订餐  娱乐 生活
		注册账户 14亿+ （7亿）
1 相关概念
2 MyCat软件介绍
3 配置数据分片
	3.1  配置数据分片服务器192.168.4.56
		3.1.1 安装软件
		3.1.2 配置文件说明
		3.1.3 修改配置文件
			3.1.3.1 配置客户端连接使用的用户及密码
				]# vim server.xml (使用默认配置)
TESTDB

			3.1.3.2 配置数据分片
]# cp schema.xml /opt/
]# sed -i '56,77d' schema.xml 
]# sed -i '39,42d' schema.xml 
]# sed -i '16,18d' schema.xml 
]# sed -i '45,47d' schema.xml 
]# vim schema.xml



	3.2  配置数据库服务器192.168.4.53/54/55	
		3.2.1 用户授权
		3.2.2 创建存储数据库

[root@host53 ~]# mysql -uroot -p123qqq...A -e 'create database db1'
[root@host53 ~]# mysql -uroot -p123qqq...A -e 'grant all on *.* to admin@"%" identified by "123qqq...A"'

[root@host54 ~]# mysql -uroot -p123qqq...A -e 'create database db2'
[root@host54 ~]# mysql -uroot -p123qqq...A -e 'grant all on *.* to admin@"%" identified by "123qqq...A"'

[root@host55 ~]# mysql -uroot -p123qqq...A -e 'create database db3'
[root@host55 ~]# mysql -uroot -p123qqq...A -e 'grant all on *.* to admin@"%" identified by "123qqq...A"'



4 启动mycat服务(192.168.4.56)
	[root@host56 conf]# /usr/local/mycat/bin/mycat -help
	[root@host56 conf]# /usr/local/mycat/bin/mycat  status
	[root@host56 conf]# /usr/local/mycat/bin/mycat  start
	[root@host56 conf]# /usr/local/mycat/bin/mycat  status
5 查看服务信息
	查看进程
	[root@host56 conf]# ps -C java
	查看端口
	[root@host56 conf]# netstat -utnlp  | grep :8066
	日志文件
	[root@host56 conf]# ls /usr/local/mycat/logs/
		


6 客户端50 连接分片服务器56 访问数据
	[root@host50 ~]# mysql -h192.168.4.56 -P8066 -uroot -p123456
	> show  databases;
	> use  TESTDB;
	> show tables;
	> desc goods;

7 排错时间
	自行排错时间
			14:40  讲新内容

8 分片规则的使用

	枚举法sharding-by-intfile: 字段值必须在列举范围内选择

	]# vim schema.xml 
	<table name="employee" primaryKey="ID" dataNode="dn1,dn2,dn3"
                           rule="sharding-by-intfile" />

	]# vim rule.xml

	<tableRule name="sharding-by-intfile">
                <rule>
                        <columns>sharding_id</columns>
                        <algorithm>hash-int</algorithm>
                </rule>
        </tableRule>


	<function name="hash-int"
                class="io.mycat.route.function.PartitionByFileMap">
                <property name="mapFile">partition-hash-int.txt</property>
        </function>
 
	:wq
	

	]# vim /usr/local/mycat/conf/partition-hash-int.txt
	10000=0
	10010=1
	10020=2	
	:wq

	]# /usr/local/mycat/bin/mycat stop
	]# /usr/local/mycat/bin/mycat start
        ]# netstart -utnlp  | grep  ；8066

[root@host50 ~]# mysql -h192.168.4.56 -P8066 -uroot -p123456
mysql> use TESTDB;

mysql> create table  employee ( ID  int  primary key  auto_increment , 
sharding_id  int , name char(15) , age  tinyint ,sex enum("man","woman"));
 
mysql> insert into employee(sharding_id , name , age , sex) 
       values(10000,"bob",19,"woman");

mysql> insert into employee(sharding_id , name , age , sex) 
       values(10010,"bob",19,"woman");

mysql> insert into employee(sharding_id , name , age , sex) 
       values(10020,"bob",19,"woman");

mysql> insert into employee(sharding_id , name , age , sex) 
       values(10020,"jim",19,"woman");

mysql> insert into employee(sharding_id , name , age , sex) 
       values(10020,"lucy",19,"woman");

mysql> select  * from   employee;
					
	求模法mod_long: 根据字段值与设定的数字求模结果存储数据

	]# vim schema.xml
           <table name="hotnews" dataNode="dn1,dn2,dn3" rule="mod-long" />
	:wq

	]# vim rule.xml
	 <tableRule name="mod-long">
                <rule>
                        <columns>id</columns>
                        <algorithm>mod-long</algorithm>
                </rule>
         </tableRule>

<function name="mod-long" class="io.mycat.route.function.PartitionByMod">
                <!-- how many data nodes -->
                <property name="count">3</property>
</function>
	:wq

	[root@host56 ~]# /usr/local/mycat/bin/mycat  stop
	[root@host56 ~]# /usr/local/mycat/bin/mycat  start

	[root@host50 ~]# mysql -h192.168.4.56 -P8066 -uroot -p123456
mysql> use TESTDB;
Database changed
mysql> create table hotnews(
id int , title char(50),worker char(10), comment  varchar(150));

insert into hotnews(id,title,worker,comment) values(7,"linux","redhat","linux-lb");
insert into hotnews(id,title,worker,comment) values(8,"linux","redhat","linux-lb");
insert into hotnews(id,title,worker,comment) values(9,"linux","redhat","linux-lb");
insert into hotnews(id,title,worker,comment) values(6,"linux","redhat","linux-lb");

	type=global 数据不分片存储
	]# vim schema.xml
        <table name="goods" primaryKey="ID" type="global" dataNode="dn1,dn2,dn3" />

	:wq

[root@host50 ~]# mysql -h192.168.4.56 -P8066 -uroot -p123456
mysql> use TESTDB;
mysql> create table  goods(ID int primary key ,name char(15),class char(9));
mysql> insert into goods(ID ,name , class)values(1,"tom","nsd1906");
mysql> insert into goods(ID ,name , class)values(2,"jim","nsd1906");
mysql> insert into goods(ID ,name , class)values(3,"max","nsd1906");

9 添加新库/新表
	9.1 添加新库
	    ]# vim server.xml
		<user name="root">
                   <property name="schemas">TESTDB,BBSDB</property>

		<user name="user">
                  <property name="schemas">TESTDB,BBSDB</property>
	   :wq

	9.2 添加新表
		]# vim schema.xml
<schema name="BBSDB" checkSQLschema="false" sqlMaxLimit="100">
             <table name="company2" primaryKey="ID" type="global" dataNode="dn1,dn2,dn3" />

             <table name="employee2" primaryKey="ID" dataNode="dn1,dn2,dn3"
                           rule="sharding-by-intfile" />

              <table name="hotnews2" dataNode="dn1,dn2,dn3" rule="mod-long" />

</schema>
             :wq 		
	9.3 重启服务
[root@host56 ~]# /usr/local/mycat/bin/mycat  stop
[root@host56 ~]# /usr/local/mycat/bin/mycat  start
[root@host56 ~]# netstat -utnlp  | grep  :8066

	9.4 测试配置
[root@host50 ~]# mysql -h192.168.4.56 -P8066 -uroot -p123456
mysql> show databases;
+----------+
| DATABASE |
+----------+
| BBSDB    |
| TESTDB   |
+----------+
mysql> use BBSDB;
mysql> show tables;
+-----------------+
| Tables in BBSDB |
+-----------------+
| company2        |
| employee2       |
| hotnews2        |
+-----------------+
3 rows in set (0.00 sec)


++++++++RDBMS2_DAY04_MHA集群
一、相关概念（知识回顾）
	集群分类： 
		LB : LVS 、Nginx 、HAproxy  
		HA : Keepalived   (主 备  vip)
		HPC: 专业领域 
二、MHA介绍

三、环境准备
	3.1 安装依赖的perl软件
	3.2 配置ssh密钥对认证登陆
	3.3 配置一主多从同步结构
		1 配置主服务器192.168.4.51


四、创建MHA集
	4.1 配置管理主机
		4.1.1 安装软件
			]# yum -y  install perl-DBD-mysql perl-DBI  perl-ExtUtils-*  perl-CPAN*
			]# rpm -ivh mha4mysql-node-0.56-0.el6.noarch.rpm 
			]# tar -zxvf mha4mysql-manager-0.56.tar.gz 
			]# cd mha4mysql-manager-0.56/
			]# perl Makefile.PL 
			]# make
			]# make install

		4.1.2 编写主配置文件
]# mkdir /etc/mha			

[root@host57 mha4mysql-manager-0.56]# cp samples/conf/app1.cnf /etc/mha/

]#vim /etc/mha/app1.cnf

		4.1.2 创建故障切换脚本
		 mha-soft-student]# cp master_ip_failover  /etc/mha/
		 ]# chmod +x /etc/mha/master_ip_failover
		 ]# vim +35 /etc/mha/master_ip_failover
			my $vip = '192.168.4.100/24';  # Virtual IP 
			my $key = "1";
			my $ssh_start_vip = "/sbin/ifconfig eth0:$key $vip";
			my $ssh_stop_vip = "/sbin/ifconfig eth0:$key down";
		 :wq
		4.1.3 在主服务器51 配置VIP地址
		]# ifconfig eth0:1  192.168.4.100
		]# ifconfig eth0:1

	4.2 配置数据节点 192.168.4.51/52/53
		4.2.1 安装mha_node软件 (3台数据库服务器都要安装)
		4.2.2 用户授权(3台数据库服务器都要做用户授权)
		2.2.3 启用半同步复制模式

五、测试配置 (192.168.4.57)
	5.1 测试ssh配置
		]#masterha_check_ssh --conf=/etc/mha/app1.cnf

	5.2 测试主从同步配置
		]#masterha_check_repl --conf=/etc/mha/app1.cnf

	 时间 到 16:30

	5.3 启动管理服务
[root@host57 ~]# masterha_manager --conf=/etc/mha/app1.cnf --remove_dead_master_conf  --ignore_last_failover 

	
]# masterha_check_status --conf=/etc/mha/app1.cnf

六、测试集群功能
	6.1 客户端50 连接vip地址访问数据库服务，存取数据
	6.2 测试集群高可用功能
	6.3 修复故障的数据库服务器

	MHA 必须做的配置
		必须要配置mysql主从同步
		必须要指定vip地址
		恢复主机时必须手动同步数据和手动配置主从结构，重新修改配置

++++RDBMS2_DAY05
一、PXC集群
	1.1 软件介绍
	1.2 配置PXC集群
		1.2.1 主机名绑定
		1.2.2 安装PXC软件
		1.2.3 修改配置文件
		1.2.4 启动服务（在任意一台主机执行即可）
		1.2.5 测试配置
二、mysql存储引擎
	2.1 mysql存储引擎介绍
	2.2 使用存储引擎：
		1 修改数据库服务默认使用的存储引擎
			]# vim /etc/my.cnf
			   [mysqld]
				defaulte-stroage-engine=myisam
			:wq

		2 建表时指定表使用的存储引擎
		   mysql> create table db10.c(age int)engine=innodb;

		3 修改表使用的存储引擎
		   mysql> alter table db10.e engine=myisam;

 事务？ 事务回滚？ 事务的特点？

++++NoSQL_DAY01
一、搭建Redis服务器
	1.1 相关概念: 关系型数据库 RDBMS  非关系型数据库NoSQL
	1.2 Redis介绍：
	1.3 搭建数据库服务器redis服务
		1 安装软件
		2 服务初始化
		3 查看服务状态
		4 连接服务存取数据
		5 服务的停止与启动，及查看数据的存储目录

	1.4 数据的常用管理命令

	1.5 配置文件常用配置 /etc/redis/6379.conf

	1.6 修改配置文件

二、部署LNMP+Redis
	2.1 部署LNMP
	2.2 配置PHP支持redis
		1 安装软件
		2 修改配置文件
		3 重启动服务
		4 测试配置

++++NoSQL_DAY02-Redis集群

一 创建集群
	1.1 部署管理主机
			
	1.2 配置redis服务器

	1.3 创建集群
[root@host57 src]# redis-trib.rb create  --replicas 1  192.168.4.51:6351  192.168.4.52:6352  192.168.4.53:6353 192.168.4.54:6354 192.168.4.55:6355 192.168.4.56:6356 
>>> Creating cluster
>>> Performing hash slots allocation on 6 nodes...
Using 3 masters:
192.168.4.51:6351
192.168.4.52:6352
192.168.4.53:6353
Adding replica 192.168.4.55:6355 to 192.168.4.51:6351
Adding replica 192.168.4.56:6356 to 192.168.4.52:6352
Adding replica 192.168.4.54:6354 to 192.168.4.53:6353
M: 72bc76feacc7c838d5741f1425d707cb8ddd42dc 192.168.4.51:6351
   slots:0-5460 (5461 slots) master
M: 479a8c61fab268142690910febb00601f6aacb6d 192.168.4.52:6352
   slots:5461-10922 (5462 slots) master
M: 8868d9ca875c5a776be300cc5679747233807af6 192.168.4.53:6353
   slots:10923-16383 (5461 slots) master
S: c7beb679a313d22fc12bcb70e44eee11806a7666 192.168.4.54:6354
   replicates 8868d9ca875c5a776be300cc5679747233807af6
S: 3568f54601788c808abbcd886fb36dfd6993e51d 192.168.4.55:6355
   replicates 72bc76feacc7c838d5741f1425d707cb8ddd42dc
S: e63e65a585e795fcf581c8ec790de029cf9e0e88 192.168.4.56:6356
   replicates 479a8c61fab268142690910febb00601f6aacb6d
Can I set the above configuration? (type 'yes' to accept): yes
>>> Nodes configuration updated
>>> Assign a different config epoch to each node
>>> Sending CLUSTER MEET messages to join the cluster
Waiting for the cluster to join...
>>> Performing Cluster Check (using node 192.168.4.51:6351)
M: 72bc76feacc7c838d5741f1425d707cb8ddd42dc 192.168.4.51:6351
   slots:0-5460 (5461 slots) master
   1 additional replica(s)
S: 3568f54601788c808abbcd886fb36dfd6993e51d 192.168.4.55:6355
   slots: (0 slots) slave
   replicates 72bc76feacc7c838d5741f1425d707cb8ddd42dc
S: e63e65a585e795fcf581c8ec790de029cf9e0e88 192.168.4.56:6356
   slots: (0 slots) slave
   replicates 479a8c61fab268142690910febb00601f6aacb6d
M: 479a8c61fab268142690910febb00601f6aacb6d 192.168.4.52:6352
   slots:5461-10922 (5462 slots) master
   1 additional replica(s)
S: c7beb679a313d22fc12bcb70e44eee11806a7666 192.168.4.54:6354
   slots: (0 slots) slave
   replicates 8868d9ca875c5a776be300cc5679747233807af6
M: 8868d9ca875c5a776be300cc5679747233807af6 192.168.4.53:6353
   slots:10923-16383 (5461 slots) master
   1 additional replica(s)
[OK] All nodes agree about slots configuration.
>>> Check for open slots...
>>> Check slots coverage...
[OK] All 16384 slots covered.
[root@host57 src]# 


10:54  成都中心的投影坏了 休息15分钟到11：10 分

自行排错时间15分钟 11:25  上课


	1.4 查看集群
[root@host57 src]# redis-trib.rb info 192.168.4.54:6354
[root@host57 src]# redis-trib.rb check 192.168.4.54:6354


	1.5 访问集群存取数据
[root@host50 ~]# redis-cli  -c  -h 192.168.4.52 -p 6352
> set name bob
> set age 21
> set sex girl
> set school tarena
> set class  nsd1906
> set pay 16800
> keys *
> get name


	1.6 集群存取数据的工作过程
	1.7 测试集群高可用功能

二 管理集群
	2.1 向集群中添加新主机
		添加master角色主机
要求 把ip 192.168.4.58的redis服务器添加到集群里做主服务器。操作步骤：
		1 运行redis服务且支持集群功能
		2 添加master角色的主机(192.168.4.57)
			添加主机到集群里
[root@57 ~]# redis-trib.rb add-node  192.168.4.58:6358 192.168.4.52:6352

			分配hash slots 槽
]# redis-trib.rb  reshard 192.168.4.51:6351

			查看集群信息
]# redis-trib.rb  info 192.168.4.51:6351
]# redis-trib.rb  check 192.168.4.51:6351

			访问集群存取数据
]# redis-cli  -c  -h 192.168.4.58  -p  6358 
> keys *
> set  v10  101
> set  v20  102

		添加slave角色主机
要求 把ip 192.168.4.59的redis服务器添加到集群里做从服务器。操作步骤：
                1 运行redis服务且支持集群功能

                2 添加slave角色的主机(192.168.4.57)
[root@mysql57 ~]# redis-trib.rb add-node  --slave  192.168.4.59:6359  192.168.4.51:6351

ot@mysql57 ~]# redis-trib.rb  info 192.168.4.51:6351

ot@mysql57 ~]# redis-trib.rb  check 192.168.4.51:6351

client50 ~] redis-cli  -c  -h 192.168.4.59 -p 6359
> keys *
> set  a1  101
> set  a2  102


	2.2 把主机移除集群
		移除slave角色主机 (192.168.4.59)
[root@57 ~]# redis-trib.rb   check 192.168.4.52:6352

[root@57 ~]# redis-trib.rb   del-node 192.168.4.52:6352 3ebf0f1794ff5e84f5c4c607615200c3cb4fa179

[root@57 ~]# redis-trib.rb   info 192.168.4.52:6352

		移除master角色主机(192.168.4.58)
			释放占用的hash槽
			移除主机

	2.3 把移除的主机再次添加到集群里(master/slave)
		1 ]# /etc/init.d/redis_6379 start
		2 ]# redis-cli  -h ip  -p port
		  > cluster  reset
		  > exit

		3 redis-trib.rb  add-node [--slave] ip:port  ip:port
		4 redis-trib.rb  info  ip:port

	2.4 让1台主服务有2个从服务器
]# redis-trib.rb  add-node --slave --master-id  66191e4ca7ae3aaef76ec88dff4cb5b2cdaeaeef  192.168.4.59:6359  192.168.4.55:6355

+++++++NoSQL_DAY03
一、主从复制 (一主一从 一主多从 主从从)
	1.1 命令行配置 slaveof  
		       info replication
 
	1.2 永久配置
		vim /etc/redis/6379.conf


		> config set 
		> config rewrite


	1.3 配置带验证的主从复制


	1.4 哨兵服务
		1 安装源码的redis软件
		2 编写主配置文件
]# vim  /etc/sentinel.conf
bind 0.0.0.0
sentinel monitor  redis51  192.168.4.51  6351  1
sentinel auth-pass redis51  123456
:wq

		3 启动哨兵服务
		]# redis-sentinel /etc/sentinel.conf

二、持久化:
	2.1 RDB (默认) dump.rdb
	2.2 AOF

	休息到 16：20 

三、数据类型
	3.1 字符类型
1byte=8位      01
1K=1024Byte
1M=1024K
1G=1024M
	3.2 列表类型
	lpush lrang  lpop  llen  lindex 
	lset  rpop  rpush 
	3.3 hash表类型


搭建Redis服务器  Redis服务常用配置项目  LNMP+Redis
搭建Redis集群和管理集群  Redis主从复制  哨兵服务 AOF  RDB
Redis数据类型 


+++++Security_DAY01 
一、zabbix基础
	1.1 相关概念
	1.2 部署运行环境lnmp
	1.3 安装源码zabbix软件
	1.4 创建存储数据的库表及连接用户
	1.5 做初始化准备
		1.5.1 修改nginx服务运行参数
		1.5.2 安装依赖软件包
		1.5.3 修改php.ini文件
		1.5.4 重启php-fpm服务


	1.6 初始化 http://192.168.2.5/index.php
		1 欢迎页面
		2 环境检测
		3 连接数据库配置
		4 指定监控服务器
		5 配置总结
		6 安装完成
		/usr/local/nginx/html/conf/zabbix.conf.php

	1.7 登陆管理页面
		登陆名  admin
		密码    zabbix

		1.7.1 修改admin用户登陆密码
		1.7.2 修改页面语言为中文

	1.8 启动zabbix监控服务
		 1 修改配置文件
]# vim /usr/local/etc/zabbix_server.conf
     DBHost=localhost			//数据库主机
     DBName=zabbix			//设置数据库名称
     DBUser=zabbix			//设置数据库账户
     DBPassword=zabbix			//设置数据库密码
     LogFile=/tmp/zabbix_server.log		//设置日志
:wq
	
		 2 启动服务
			]# useradd zabbix
			]# zabbix_server
		]# killall  -9  zabbix_server 停止服务命令

		 3 查看服务信息
			]# netstat -utnlp  | grep :10051


二、 Zabbix监控服务
	2.1 监控远端主机  192.168.2.100或192.168.2.200
		2.1.1 配置客户端（被监控主机192.168.2.100）
			 安装软件
			 修改配置文件
			 启动 服务
			 查看服务状态

		2.1.2 配置监控服务器192.168.2.5
			管理员admin登陆web页面做如下操作：
				1 添加监控主机
				2 选择监控模板
				3 查看监控数据

	2.2 自定义监控项（在客户端定义监控命令，给监控服务器使用）
		2.2.1 配置客户端 192.168.2.100
			1 允许自定义监控命令
			2 定义监控命令 count.line.passwd
			3 重启服务
			4 测试定义的监控命令

		2.2.2 配置服务器 192.168.2.5
			管理员登陆web页面做如下配置：
			1 创建新模板    ATMP
			2 创建新应用集  mon_users
		3 创建新监控项	mon_web100_user  对应命令 count.line.passwd
			4 监控主机100 使用新创建的模板 ATMP
			5 查看监控数据


+++++security_day02 
	2.3 监控报警
要求：监控主机100系统的总用户数量大于24个时，发邮件给zabbix@localhost邮箱。

		2.3.1 创建触发器 cfq1
			创建触发器
			指定对应的监控项
			定义表达式
	
		2.3.2 创建动作
			准备邮件服务器192.168.2.5
			指定邮件服务器
			指定收件人
			创建动作 act1

			测试配置：在监控的100主机上添加新用户 触发器被触发后执行动作。查看用户zabbix@localhost是否收到邮件。

一进阶操作
	1.1 自动发现：
		具体操作如下：
			1创建自动发现规则 fxruel1
			2创建动作 act2
			3测试配置: 配置主机的ip地址在192.168.2.1到192.168.2.254之间 且运行了httpd服务器监听80端口 ，查看监控的主机列表。

	1.2 主被动监控
		1.2.1 概念 ？
		1.2.2 配置客户端 192.168.2.201
			1 安装zabbix软件
			2 修改配置文件（设置为主动模式）
			3 启动服务
			4 查看进程

		1.2.3配置监控服务器 192.168.2.5
			1 添加监控主机 0.0.0.0   
			2 克隆模板
			3 调用克隆的模板监控主机web201
			4 查看监控数据

	1.3拓扑图与聚合图形
		1.3.1 拓扑图 
		1.3.2 聚合图形 在一个页面显示多个数据图表，方便了解多组数据
		
二监控案例
	2.1 监控nginx 
	    客户端192.168.2.100 做如下配置
		 
                运行nginx服务 并支持查看状态信息
		编写脚本，并给脚本加x权限
		把脚本定义为命令
		重启动zabbix_agentd服务
		测试命令

		在监控页面做如下配置
			1 创建新的监控模板  ATMP2
			2 创建新的应用集    nginx_status
			3 创建新的监控项    名称 和 对应的命令
				now_link_num   get_nginx_status[Active]
				his_sum_num   get_nginx_status[accepts]
				wating_nginx_num  get_nginx_status[Waiting]
			4 调用新创建的模板监控主机100
			5 查看监控数据

	时间10分钟到 15：35 

  	2.2 监控网络连接状态   TCP
			创建脚本并赋予X权限
			定义命令
			重启zabbix_agentd服务
			测试命令

		 在监控页面做如下配置
                        1 创建新的监控模板  ATMP2(省略)
                        2 创建新的应用集    tcp_status
                        3 创建新的监控项    名称 和 对应的命令
				estab_link     get_tcp_status[estab]
				time_wait_num  get_tcp_status[time_wait]
				close_wait_num get_tcp_status[close_wait]

                        4 调用新创建的模板监控主机100
                        5 查看监控数据


	2.3 思考题---其他课外扩展

+++++++++SECURITY_DAY03
一 selinux 应用
	查看上下文
	ls  -lZ  /etc/passwd
	ls -ldZ  /etc
	ps aux  -Z
	ps  aux -Z  | grep  httpd

用户:角色:访问类型:选项...
system_u:object_r:passwd_file_t:s0
system_u:system_r:httpd_t:s0

	1.1 一般操作规律

创建新文件或新目录 自动继承父目录的上下文

移动的文件时，保持原有的上下文属性不变

复制的文件，自动继承目标位置的上下文


修改安全上下文
	]# chcon  -t httpd_sys_content_t a.html
	]# chcon  -R -t httpd_sys_content_t /var/www/html

恢复为所在位置的默认上下文属性 
	]# restorecon  a.html
	]# restorecon  -R /var/www/html

重启后全部重置  touch /.autorelabel  ; reboot

	3.2 调整SELinux布尔值bool  真 / 假
	    服务的功能开关
 	    查看布尔值 getsebool -a 
	    修改布尔值 setsebool  -P 选项  值

案例 ： 运行ftp服务 允许匿名用户对/var/ftp/share目录有上传和下载文件的权限
  207  yum  -y install vsftpd
  208  vim +29 /etc/vsftpd/vsftpd.conf 
  209  mkdir /var/ftp/share
  210  chmod  o+w /var/ftp/share/
  211  systemctl  start vsftpd
  212  netstat -utnlp  | grep  :21
  213  cp /etc/passwd /var/ftp/share/
  214  setenforce 1

]# setsebool  -P ftpd_anon_write on
]# setsebool  -P ftpd_full_access on


客户端命令行连接ftp服务
	yum  -y install ftp
	ftp 192.168.4.71
	  ftp--->回车--->ls ---> cd  share ---> get passwd  
	  lcd  /etc   ----> put hosts  ----> ls ----> bye

	3.4 查看日志排错
]# yum -y  install setroubleshoot-server  ; reboot

	修改网站服务使用8097端口

]# systemctl restart httpd

]# grep -i  'setroubleshoot' /var/log/messages | tail  -1

Sep 23 10:18:32 localhost setroubleshoot: SELinux is preventing /usr/sbin/httpd from name_bind access on the tcp_socket port 8097. For complete SELinux messages run: sealert -l 5b5a0631-ddee-4f1b-8f66-4ba624f11da3
[root@host71 ~]# 
[root@host71 ~]# 
[root@host71 ~]# sealert -l 5b5a0631-ddee-4f1b-8f66-4ba624f11da3

]# semanage port -a -t    http_port_t   -p tcp 8097
]# systemctl  start  httpd
]# netstat  -utnlp  | grep  8097

+++++SECURITY_DAY04 
1 加密与解密
	1.1 相关概念？
	1.2 gpg介绍？
	1.3 数据加解密实验
su - root    Taren1.bgsn

useradd usera
useradd userb
echo 123456 | passwd --stdin  usera
echo 123456 | passwd --stdin  userb

	gpg对称加密与解密
usera 发送方 加密文件
	10  vim  test.txt
   	11  cat test.txt 
   	12  gpg  -c  test.txt 
        19  mv test.txt.gpg  /tmp/

userb 接收方 解密文件
	]# gpg  -d /tmp/test.txt.gpg > ~/a.txt
	]# cat ~/a.txt


        gpg非对称加密与解密(密钥对加密)
			公钥文件 加密
			私钥文件 解密

	非对称加密与解密工作过程？

userb （解密方）
	]# mv /dev/random  /dev/randomold
	]# ln -s /dev/urandom /dev/random
	创建密钥对 gpg --gen-key
	
	导出公钥   gpg --export -a
	    ]$ gpg --export -a  >   userb.pub

	共享公钥   scp 
	    ]$ mv userb.pub /tmp/

usera （加密方）
	导入公钥  gpg --import
             ]$ gpg --import /tmp/userb.pub

	使用公钥加密文件 gpg -e  -r 用户名
	     ]$ gpg -e -r userb test2.txt 

	共享加密文件 scp
		]$ mv test2.txt.gpg  /tmp/

       userb用户使用私钥解密 gpg -d 
	       ]$ gpg -d  /tmp/test2.txt.gpg  > ~/a2.txt
	       ]$ cat ~/a2.txt

	gpg数字签名 (验证文件的完整性) 
		软件签名与验证过程
			

	userb 对文件做数字签名 gpg  -b

		]$ gpg -b a.txt
		]$ mv a.txt  /tmp/
		]$ mv a.txt.sig  /tmp/

	usera和userc验证签名   gpg --verify
		]# cat /tmp/a.txt
		]# gpg --verify  /tmp/a.txt.sig

		root~]# echo "aaaa" >> /tmp/a.txt
		]# gpg --verify  /tmp/a.txt.sig
	
		
		root~]# sed -i '$d' /tmp/a.txt
		]# gpg --verify  /tmp/a.txt.sig
		
		休息到 15：25
		gpg对称加密与解密
		gpg非对称加密与解密
		gpg数字签名 

二 、AIDE入侵检测系统
		yum  -y  install aide
		sed  -i '99,312s/^/#/' /etc/aide.conf
		vim  +98 /etc/aide.conf
		  /root/  FIPSR
		:wq

		]# aide  --init

		]# ls /var/lib/aide/aide.db.new.gz

		]# mv  /var/lib/aide/aide.db.new.gz /opt/
                ]# cp /opt/aide.db.new.gz /var/lib/aide/aide.db.gz

		]# aide --check
		
三、扫描与抓包
	3.1 扫描 nmap
		]# yum -y  install nmap
		]# which nmap
		]# nmap --help
		]# man nmap

		命令格式 
		nmap  [扫描类型]  [选项]  <扫描目标 ...>

		扫描类型 -sP  -sS  -sT  -sU udp
		选项 -A -p  -n
		扫描目标的表示方式
]# nmap -sP  172.40.54.0/24
]# nmap -sP  172.40.54.118
]# nmap -sP  172.40.54.110-120
]# nmap -sP  172.40.54.110,119,174  

]# nmap  172.40.54.110
]# nmap -A  172.40.54.110

]# nmap -p 80,22,8097 192.168.4.71

]# nmap -p 20-25 192.168.4.71

]# nmap -n  -p 20-25 192.168.4.71


	3.2 抓包 tcpdump

	抓包选项 -i  -c  -w  -r  -A
	抓包条件

]# tcpdump -i br1
]# tcpdump -i br1  -c 2

]# tcpdump -i br1  -c 2  -w   /tmp/a.cap
]# tcpdump  -r   /tmp/a2.cap

]# tcpdump -i br1  -c 2 -A  -w   /tmp/a2.cap
]# tcpdump  -A  -r   /tmp/a2.cap

]# tcpdump -i br1  -c 2  host 172.40.54.110 and  tcp port 22


审计服务









